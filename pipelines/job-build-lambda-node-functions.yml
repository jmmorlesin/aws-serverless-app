jobs:
- job: BuildNodeFunctions
  displayName: Build Node Functions

  variables:
  - name: LAMBDA_NODE_TEST_RESULTS_ARTIFACT
    value: lambda-node-test-results-$(Build.BuildNumber)
  - name: NODE_CODE_PATH
    value: $(Build.SourcesDirectory)/lambda-src/node
  - name: TEST_RESULTS
    value: $(NODE_CODE_PATH)/$(TEST_RESULTS_PATH)

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
    displayName: Install Node
  
  - script: |
      npm install
      npm run lint
      npm test
    displayName: Lint and unit test code
    workingDirectory: $(NODE_CODE_PATH)
      
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: Publish unit test results
    inputs:
      testRunTitle: Node Unit Tets Results
      testResultsFormat: JUnit
      testResultsFiles: $(TEST_RESULTS)

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: Publish $(LAMBDA_NODE_TEST_RESULTS_ARTIFACT) artifact
    inputs:
      pathToPublish: $(TEST_RESULTS)
      ArtifactName: $(LAMBDA_NODE_TEST_RESULTS_ARTIFACT)

  - script: |
      rm -rf node_modules
      mkdir node_modules
      npm install --production
      rm -rf $(LAMBDA_NODE_FUNCTIONS_ZIP)
      zip -rq $(LAMBDA_NODE_FUNCTIONS_ZIP) index.js
      zip -rq $(LAMBDA_NODE_FUNCTIONS_ZIP) lib      
      zip -rq $(LAMBDA_NODE_FUNCTIONS_ZIP) node_modules
    displayName: Build deployable artifact
    workingDirectory: $(NODE_CODE_PATH)

  - task: PublishBuildArtifacts@1
    displayName: Publish $(LAMBDA_NODE_DEPLOY_ARTIFACT_NAME) artifact
    inputs:
      pathToPublish: $(NODE_CODE_PATH)/$(LAMBDA_NODE_FUNCTIONS_ZIP)
      ArtifactName: $(LAMBDA_NODE_DEPLOY_ARTIFACT_NAME)