# TODO: create CI pipelines (unit tests and local selenium tests)

# TODO: create CD pipelines for deploying to S3, Lambda, API Gateway and Route 53 with 3 environments (qa, staging production) and tested end-to-end

trigger: 
- master

name: $(SourceBranchName)-$(BuildID)-$(Rev:r)_$(Date:yyyy-MM-dd)

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: AwsCredentials
- name: DYNAMIC_ENV_NAME
  value: $(Build.SourceBranchName)-$(Build.BuildID)

stages:
- stage: UnitTestLambdaFunctions
  displayName: Unit Test Lambda Functions

  jobs:
    - job: UnitTestNodeFunction
      displayName: Unit Test Node Function

      steps:
      - script: |
          echo "TODO: npm install, npm run lint, npm test"
        displayName: Run install, lint, test

    - job: UnitTestPythonFunction
      displayName: Unit Test Python Function

      steps:
      - script: |
          echo "TODO: restore requirements and run uni tests"
        displayName: Restore requirements and run unit tests

- stage: DeployAppInAws
  displayName: Deploy App in AWS

  jobs:
  - job: DeployWebsite
    displayName: Deploy Website

    steps:
    - script: |
        echo "TODO: copy website static files to the S3 bucket"
      displayName: Upload static website files to S3 bucket

    - script: |
        echo "TODO: update the env.json to point to the right API Gateway URL"
      displayName: Update the env.json file

  - job: DeployLambdas
    displayName: Deploy Lambdas

    steps:

    - script: |
        echo "TODO: npm install --production, zip files, upload to S3 bucket and deploy to Lambda"
      displayName: Deploy latest code to Lambda

- stage: BuildAwsInfrastrcture
  displayName: Build AWS Infrastrcture

  jobs:
  - job: RunTerraform
    displayName: Run Terraform 

    steps:
    - task: DownloadSecureFile@1
      name: "tfconfig"
      displayName: 'Downlaod secure aws-s3-backend.tfconfig file'
      inputs:
        secureFile: aws-s3-backend.tfconfig

    - task: DownloadSecureFile@1
      name: "tfvars"
      displayName: 'Downlaod secure terraform.tfvars file'
      inputs:
        secureFile: terraform.tfvars

    - script: |
        cp $(tfconfig.secureFilePath) terraform/aws-s3-backend.tfconfig
        cp $(tfvars.secureFilePath) terraform/terraform.tfvars
      displayName: Copy secure files to terraform directory

    # Third-party task from the Marketplace
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: 0.12.25

    - script: |    
        terraform init -backend-config="aws-s3-backend.tfconfig"
        terraform validate
        terraform workspace new $(DYNAMIC_ENV_NAME)
        terraform plan -out $(DYNAMIC_ENV_NAME).tfplan
        terraform apply "$(DYNAMIC_ENV_NAME).tfplan"
      displayName: Create $(DYNAMIC_ENV_NAME) environment
      workingDirectory: terraform
      env: 
        AWS_ACCESS_KEY_ID: $(aws_access_key_id)
        AWS_SECRET_ACCESS_KEY: $(aws_secret_access_key)
        AWS_DEFAULT_REGION: $(region)   

- stage: DestroyAwsInfrastructure
  displayName: Destroy AWS Infrastructure
  condition: always()

  jobs:
    - job: RunTerraform
      displayName: Run Terraform 
  
      steps:
      - task: DownloadSecureFile@1
        name: "tfconfig"
        displayName: 'Downlaod secure aws-s3-backend.tfconfig file'
        inputs:
          secureFile: aws-s3-backend.tfconfig
  
      - task: DownloadSecureFile@1
        name: "tfvars"
        displayName: 'Downlaod secure terraform.tfvars file'
        inputs:
          secureFile: terraform.tfvars
  
      - script: |
          cp $(tfconfig.secureFilePath) terraform/aws-s3-backend.tfconfig
          cp $(tfvars.secureFilePath) terraform/terraform.tfvars
        displayName: Copy secure files to terraform directory
  
      # Third-party task from the Marketplace
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: 0.12.25
  
      - script: |    
          terraform init -backend-config="aws-s3-backend.tfconfig"
          terraform workspace select $(DYNAMIC_ENV_NAME)
          terraform destroy -auto-approve
          terraform workspace select default
          terraform workspace delete $(DYNAMIC_ENV_NAME)
        displayName: Destroy $(DYNAMIC_ENV_NAME) environment
        workingDirectory: terraform
        env: 
          AWS_ACCESS_KEY_ID: $(aws_access_key_id)
          AWS_SECRET_ACCESS_KEY: $(aws_secret_access_key)
          AWS_DEFAULT_REGION: $(region)     